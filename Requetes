SET SERVEROUTPUT ON;

-- 1
SELECT c.TitreContenu
FROM Contenu c, Professionnel pr, Participe pa
WHERE pr.NomPro = 'Norris' AND pr.PrenomPro = 'Chuck' AND pa.Profession = 'Acteur'
AND pa.IDContenu = c.IDContenu AND pr.IDPro = pa.IDPro;
/

-- 2
SELECT IDClient
FROM (select a.IDClient, a.IDProfil, COUNT(*)
	from Avis a, Films f
	where Note is not null and Note > 5
	and a.IDContenu = f.IDContenu
	group by (a.IDClient, a.IDProfil)
	having count(*) > 10)
GROUP BY IDClient;
/

-- 3
SELECT pr1.IDPro
FROM Professionnel pr1, Professionnel pr2, Participe pa1, Participe pa2
WHERE pa1.Profession = 'Acteur'
AND pa2.Profession = 'Réalisateur' AND pa2.Role = 'Principal'
AND pa1.IDContenu = pa2.IDContenu
AND pa1.IDPro = pr1.IDPro AND pa2.IDPro = pr2.IDPro
GROUP BY pr1.IDPro
HAVING COUNT(DISTINCT pr2.IDPro) = 1;
/

-- 4
SELECT pr2.NomPro, pr2.PrenomPro
FROM Participe pa1, Participe pa2, Professionnel pr1, Professionnel pr2
WHERE pr1.NomPro = 'Depp' AND pr1.PrenomPro = 'Johnny'
AND pa2.Profession = 'Réalisateur' AND pa1.IDContenu = pa2.IDContenu
AND pa1.IDPro = pr1.IDPro  AND pa2.IDPro = pr2.IDPro;
/

-- 5
SELECT COUNT(*)
FROM Client
WHERE TypeAbonnement = 'Etudiant';
/

-- 6
SELECT a.IDContenu, AVG(a.Note) as Note_Moyenne
FROM Films f, Avis a
WHERE EXTRACT(year from f.DateSortieFilm) = 2022 AND a.Note IS NOT NULL
AND f.IDContenu = a.IDContenu
GROUP BY a.IDContenu
ORDER BY AVG(a.Note) DESC;
/

-- 7
SELECT temp1.IDContenu, AVG(a.Note)
FROM (select l.IDContenu
	from LectureEP l, Profil p
	where to_char(l.DateLecture) LIKE '%2023'
	and TRUNC(months_between(SYSDATE, p.AgeProfil)/12) between 25 and 30
	and l.IDClient = p.IDClient and l.IDProfil = p.IDProfil) temp1 
INNER JOIN (select a.IDContenu
			from Avis a, Profil p
			where TRUNC(months_between(SYSDATE, p.AgeProfil)/12) between 25 and 30
			and a.IDClient = p.IDClient and a.IDProfil = p.IDProfil) temp2 ON temp1.IDContenu = temp2.IDContenu, Avis a
WHERE temp1.IDContenu = a.IDContenu
GROUP BY temp1.IDContenu;
/

-- 8
CREATE OR REPLACE PROCEDURE temps_moyen_prof(id_cli in Client.IDClient%type, id_prof in Profil.IDProfil%type) IS
	t	INTERVAL DAY TO SECOND;
BEGIN
SELECT NUMTODSINTERVAL(AVG(Somme), 'DAY') into t
    
FROM (select SUM(Temps) as Somme
            
        from (select TO_NUMBER(TO_CHAR(DateLecture, 'WW')) as Num_Semaine, (TempsFin - TempsDebut) as Temps
            	from LectureFilm
                where IDClient = id_cli and IDProfil = id_prof
                and DateLecture > SYSDATE - NUMTOYMINTERVAL(6, 'month')
                union
                select TO_NUMBER(TO_CHAR(DateLecture, 'WW')) as Num_Semaine, (TempsFin - TempsDebut) as Temps
                from LectureEP
                where IDClient = id_cli and IDProfil = id_prof
                and DateLecture > SYSDATE - NUMTOYMINTERVAL(6, 'month'))
                        
        group by Num_Semaine);
END;
/

-- 9
/* moyenne d'age des gens qui ont regardé tous les films ou séries  keira knightley a joué ou a réalisé
personne (table profil) telle qu'il n'existe pas de contenu dans lequel keira est (tables contenu/participe) tel que la personne a pas vu (tables lecturefilm, lectureep) */

SELECT AVG(TRUNC(months_between(SYSDATE, AgeProfil)/12)) as Age_Moyen
FROM Profil p
WHERE NOT EXISTS (select pa.IDContenu
				from Participe pa, Professionnel pr
				where pr.NomPro = 'Knightley' and pr.PrenomPro = 'Keira'
				and pa.IDPro = pr.IDPro
				and not exists (select *
								from LectureFilm f, LectureEP e
								where f.IDContenu = pa.IDContenu and e.IDContenu = pa.IDContenu
								and f.IDClient = p.IDClient and e.IDClient = p.IDClient
								and f.IDProfil = p.IDProfil and e.IDProfil = p.IDProfil));
/

-- 10
CREATE OR REPLACE PROCEDURE planning_ep(id_cli in Client.IDClient%type, id_prof in Profil.IDProfil%type) IS
    d	Episode.DateSortieEpisode%type;
    c	Episode.IDContenu%type;
    t	Series.TitreContenu%type;
    s	Episode.NumSaison%type;
    n	Episode.NumEpisode%type;
    e	Episode.TitreEpisode%type;
BEGIN
	SELECT DateSortieEpisode, IDContenu, TitreContenu, NumSaison, NumEpisode, TitreEpisode INTO d, c, t, s, n, e
	FROM (select e.DateSortieEpisode, s.IDContenu, s.TitreContenu, e.NumSaison, e.NumEpisode, e.TitreEpisode
    	from Series s, Episode e
    	where e.DateSortieEpisode > SYSDATE
    	and s.IDContenu = e.IDContenu
    	ORDER BY e.DateSortieEpisode) temp
    WHERE temp.IDContenu in (select IDContenu
    						from LectureEP
    						where IDClient = id_cli AND IDProfil = id_prof
    						group by IDContenu);
END;
/

-- 11
SELECT d.NomCategorie, COUNT(*)
FROM Participe pa, Professionnel pr, Definit d
WHERE pr.NomPro = 'Tartempion' AND pa.Profession = 'Réalisateur'
AND pa.IDPro = pr.IDPro AND d.IDContenu = pa.IDContenu
AND ROWNUM = 1
GROUP BY d.NomCategorie
ORDER BY d.NomCategorie DESC;
/

-- 12
SELECT cl.TypeAbonnement, COUNT(*)
FROM Avis a, Participe pa, Professionnel pr, Client cl
WHERE pr.NomPro = 'Dwayne The Rock' AND pr.PrenomPro = 'Johnson'
AND pa.Profession = 'Acteur' AND pa.Role = 'Principal'
AND a.IDContenu = pa.IDContenu AND pa.IDPro = pr.IDPro
AND a.IDClient = cl.IDClient
GROUP BY TypeAbonnement;
/

-- 13
DECLARE
    n	int := 1;
	f	int;
	s	int;
	a	int;
BEGIN
    SELECT COUNT(p.IDProfil) into f
    FROM Client c, Profil p
    WHERE c.TypeAbonnement = 'Famille' AND p.TypeProfil = 'Enfant'
    AND c.IDClient = p.IDClient;
	SELECT COUNT(DISTINCT p.IDClient) into a
    FROM Client c, Profil p
    WHERE c.TypeAbonnement = 'Famille' AND p.TypeProfil = 'Enfant'
    AND c.IDClient = p.IDClient;
    IF a != 0 THEN n := a;
    END IF;
	f := f/n;

	SELECT COUNT(p.IDProfil) into s
	FROM Client c, Profil p
    WHERE c.TypeAbonnement = 'Standard' AND p.TypeProfil = 'Enfant'
    AND c.IDClient = p.IDClient;
	SELECT COUNT(DISTINCT p.IDClient) into a
	FROM Client c, Profil p
    WHERE c.TypeAbonnement = 'Standard' AND p.TypeProfil = 'Enfant'
    AND c.IDClient = p.IDClient;
    IF a != 0 THEN n := a;
    END IF;
	s := s/n;

	dbms_output.put_line('Le nombre moyen de profil Enfant par compte Famille est ', || f);
	dbms_output.put_line('Le nombre moyen de profil Enfant par compte Standard est ', || s);
END;
/ 

-- 14
/* la conception permet pas de savoir si on épisode a été regardé 2 fois, sauf si c'est 2 jours différents donc on va group by et rassembler les mêmes épisodes */

CREATE OR REPLACE FUNCTION nbepisode_profil (id_cli IN Profil.IDProfil%type, id_prof IN Profil.IDProfil%type) RETURN NUMBER IS
n	NUMBER;
BEGIN
	SELECT COUNT(*) INTO n
	FROM LectureEP
	WHERE IDClient = id_cli AND IDProfil = id_prof
	GROUP BY IDContenu, NumSaison, NumEpisode;
	RETURN n;
END;
/

-- 15
SELECT AVG(TRUNC(months_between(SYSDATE, pr.AgePro)/12)) as Age_Moyen
FROM Participe pa, Professionnel pr, Films f
WHERE f.TitreContenu = 'Avengers' AND pa.Profession = 'Acteur'
AND pa.IDPro = pr.IDPro AND pa.IDContenu = f.IDContenu;
/

-- 16
SELECT p.IDClient, p.IDProfil, l.IDContenu, f.TitreContenu
FROM Profil p, LectureFilm l, Films f
WHERE p.AgeProfil >= (SYSDATE - NUMTOYMINTERVAL(25, 'year'))
AND p.IDClient = l.IDClient AND p.IDProfil = l.IDProfil
AND l.IDContenu = f.IDContenu
AND l.IDContenu in (select d.IDContenu
					from Definit d, Participe pa, Professionnel pr
					where d.NomCategorie = 'Guerre'
					and pr.NomPro = 'Butler' and pr.PrenomPro = 'Gerard'
					and pa.Profession = 'Acteur'
					and d.IDContenu = pa.IDContenu and pa.IDPro = pr.IDPro);
/

-- 17
SELECT COUNT(pa.IDPro)
FROM Participe pa, Films f
WHERE f.TitreContenu = 'Equalizer 3' AND pa.Profession = 'Acteur' AND pa.Role = 'Secondaire'
AND pa.IDContenu = f.IDContenu;
/

-- 18
-- personne (table profil) telle qu'il n'existe pas de film (vue film) tel que la personne a pas vu (table lecturefilm)

SELECT IDClient, IDProfil, Pseudo
FROM Profil
WHERE NOT EXISTS (select *
				from Films
				where not exists (select *
								from LectureFilm
								where LectureFilm.IDClient = Profil.IDClient
								and LectureFilm.IDProfil = Profil.IDProfil
								and LectureFilm.IDContenu = Films.IDContenu));
/

-- 19
/* -> reformulation de la question parce qu'elle est con :
quels sont les comptes avec abonnement étudiant dont le profil a noté plus de 30 films ? */

SELECT a.IDClient, COUNT(a.IDContenu)
FROM Avis a, Client c, Films f
WHERE c.TypeAbonnement = 'Etudiant'
AND a.IDClient = c.IDClient AND a.IDContenu = f.IDContenu
GROUP BY a.IDClient
HAVING COUNT(a.IDContenu) >= 30;
/

-- 20
SELECT NUMTODSINTERVAL(AVG(temp2.Temps_tot), 'DAY') as Temps_Moyen_Etudiant
FROM (select temp1.IDCLI, SUM(temp1.Temps) as Temps_tot
    from (select l1.IDClient as IDCLI, SUM(l1.TempsFin - l1.TempsDebut) as Temps
    		from LectureFilm l1, Client c1
    		where c1.TypeAbonnement = 'Etudiant'
    		and l1.IDClient = c1.IDClient
            group by l1.IDClient
    		union
    		select l2.IDClient as IDCLI, SUM(l2.TempsFin - l2.TempsDebut) as Temps
    		from LectureEP l2, Client c2
    		where c2.TypeAbonnement = 'Etudiant'
    		and l2.IDClient = c2.IDClient
        	group by l2.IDClient) temp1
    group by temp1.IDCLI) temp2;
/

-- 22
SELECT NomCategorie, COUNT(*)
FROM Definit
WHERE ROWNUM = 1
GROUP BY NomCategorie
ORDER BY COUNT(*) DESC;
/

-- 23
SELECT l.IDContenu, COUNT(DISTINCT l.IDContenu)
FROM LectureFilm l FULL JOIN Films f ON l.IDContenu = f.IDContenu
WHERE to_char(l.DateLecture) LIKE '%-jul-2023' AND ROWNUM = 1
GROUP BY l.IDContenu
ORDER BY 2 DESC;
/

-- 24
SELECT NUMTODSINTERVAL(SUM(Temps), 'DAY')
FROM (select l.IDContenu, l.DateLecture, (l.TempsFin - l.TempsDebut) as Temps
		from Series s, LectureEP l
		where s.AnneeSerie = 2007 AND l.DateLecture BETWEEN '01-may-2016' AND '31-jan-2018'
		and s.IDContenu = l.IDContenu)
GROUP BY IDContenu;
/

-- 25
SELECT co.TitreContenu, a.Commentaire
FROM Client cl, Profil p, Avis a, Contenu co
WHERE cl.NomClient = 'Amallah' AND p.Pseudo = 'Third-Cannon'
AND cl.IDClient = p.IDClient AND p.IDClient = a.IDClient AND p.IDProfil = a.IDProfil
AND a.IDContenu = co.IDContenu;
/
