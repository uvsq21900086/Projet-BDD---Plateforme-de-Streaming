SET SERVEROUTPUT ON;

-- 1 Quels sont les films et séries dans lesquels a joué "Chuck Norris" ?
SELECT
	C.TITRECONTENU
FROM
	CONTENU       C,
	PROFESSIONNEL PR,
	PARTICIPE     PA
WHERE
	PR.NOMPRO = 'Norris'
	AND PR.PRENOMPRO = 'Chuck'
	AND PA.PROFESSION = 'Acteur'
	AND PA.IDCONTENU = C.IDCONTENU
	AND PR.IDPRO = PA.IDPRO;

/

-- 2 Quelles sont les comptes dont au moins un profil a donné une note supérieure à 5 à plus de 10 films ?
SELECT
	IDCLIENT
FROM
	(
		SELECT
			A.IDCLIENT,
			A.IDPROFIL,
			COUNT(*)
		FROM
			AVIS  A,
			FILMS F
		WHERE
			NOTE IS NOT NULL
			AND NOTE > 5
			AND A.IDCONTENU = F.IDCONTENU
		GROUP BY
			(A.IDCLIENT, A.IDPROFIL)
		HAVING
			COUNT(*) > 10
	)
GROUP BY
	IDCLIENT;

/

-- 3 Quels sont les acteurs qui n’ont travaillé qu’avec un seul réalisateur principal ?
SELECT
	PR1.IDPRO
FROM
	PROFESSIONNEL PR1,
	PROFESSIONNEL PR2,
	PARTICIPE     PA1,
	PARTICIPE     PA2
WHERE
	PA1.PROFESSION = 'Acteur'
	AND PA2.PROFESSION = 'Réalisateur'
	AND PA2.ROLE = 'Principal'
	AND PA1.IDCONTENU = PA2.IDCONTENU
	AND PA1.IDPRO = PR1.IDPRO
	AND PA2.IDPRO = PR2.IDPRO
GROUP BY
	PR1.IDPRO
HAVING
	COUNT(DISTINCT PR2.IDPRO) = 1;

/

-- 4 Quels réalisateurs ont travaillé avec "Johnny Depp" ?
SELECT
	PR2.NOMPRO,
	PR2.PRENOMPRO
FROM
	PARTICIPE     PA1,
	PARTICIPE     PA2,
	PROFESSIONNEL PR1,
	PROFESSIONNEL PR2
WHERE
	PR1.NOMPRO = 'Depp'
	AND PR1.PRENOMPRO = 'Johnny'
	AND PA2.PROFESSION = 'Réalisateur'
	AND PA1.IDCONTENU = PA2.IDCONTENU
	AND PA1.IDPRO = PR1.IDPRO
	AND PA2.IDPRO = PR2.IDPRO;

/

-- 5
SELECT
	COUNT(*)
FROM
	CLIENT
WHERE
	TYPEABONNEMENT = 'Etudiant';

/

-- 6
SELECT
	A.IDCONTENU,
	AVG(A.NOTE) AS NOTE_MOYENNE
FROM
	FILMS F,
	AVIS  A
WHERE
	EXTRACT(YEAR FROM F.DATESORTIEFILM) = 2022
	AND A.NOTE IS NOT NULL
	AND F.IDCONTENU = A.IDCONTENU
GROUP BY
	A.IDCONTENU
ORDER BY
	AVG(A.NOTE) DESC;

/

-- 7
SELECT
	TEMP1.IDCONTENU,
	AVG(A.NOTE)
FROM
	(
		SELECT
			L.IDCONTENU
		FROM
			LECTUREEP L,
			PROFIL    P
		WHERE
			TO_CHAR(L.DATELECTURE) LIKE '%2023'
			AND TRUNC(MONTHS_BETWEEN(SYSDATE, P.AGEPROFIL)/12) BETWEEN 25 AND 30
			AND L.IDCLIENT = P.IDCLIENT
			AND L.IDPROFIL = P.IDPROFIL
	)    TEMP1
	INNER JOIN (
		SELECT
			A.IDCONTENU
		FROM
			AVIS   A,
			PROFIL P
		WHERE
			TRUNC(MONTHS_BETWEEN(SYSDATE, P.AGEPROFIL)/12) BETWEEN 25 AND 30
			AND A.IDCLIENT = P.IDCLIENT
			AND A.IDPROFIL = P.IDPROFIL
	) TEMP2
	ON TEMP1.IDCONTENU = TEMP2.IDCONTENU,
	AVIS A
WHERE
	TEMP1.IDCONTENU = A.IDCONTENU
GROUP BY
	TEMP1.IDCONTENU;

/

-- 8
CREATE OR REPLACE PROCEDURE TEMPS_MOYEN_PROF(
	ID_CLI IN CLIENT.IDCLIENT%TYPE,
	ID_PROF IN PROFIL.IDPROFIL%TYPE
) IS
	T INTERVAL DAY TO SECOND;
BEGIN
	SELECT
		NUMTODSINTERVAL(AVG(SOMME), 'DAY') INTO T
	FROM
		(
			SELECT
				SUM(TEMPS) AS SOMME
			FROM
				(
					SELECT
						TO_NUMBER(TO_CHAR(DATELECTURE, 'WW')) AS NUM_SEMAINE,
						(TEMPSFIN - TEMPSDEBUT)               AS TEMPS
					FROM
						LECTUREFILM
					WHERE
						IDCLIENT = ID_CLI
						AND IDPROFIL = ID_PROF
						AND DATELECTURE > SYSDATE - NUMTOYMINTERVAL(6, 'month')
					UNION
					SELECT
						TO_NUMBER(TO_CHAR(DATELECTURE, 'WW')) AS NUM_SEMAINE,
						(TEMPSFIN - TEMPSDEBUT)               AS TEMPS
					FROM
						LECTUREEP
					WHERE
						IDCLIENT = ID_CLI
						AND IDPROFIL = ID_PROF
						AND DATELECTURE > SYSDATE - NUMTOYMINTERVAL(6, 'month')
				)           
			GROUP BY
				NUM_SEMAINE
		);
END;
/

-- 9
/* moyenne d'age des gens qui ont regardé tous les films ou séries  keira knightley a joué ou a réalisé
personne (table profil) telle qu'il n'existe pas de contenu dans lequel keira est (tables contenu/participe) tel que la personne a pas vu (tables lecturefilm, lectureep) */

SELECT
	AVG(TRUNC(MONTHS_BETWEEN(SYSDATE, AGEPROFIL)/12)) AS AGE_MOYEN
FROM
	PROFIL        P
WHERE
	NOT EXISTS (
		SELECT
			PA.IDCONTENU
		FROM
			PARTICIPE     PA,
			PROFESSIONNEL PR
		WHERE
			PR.NOMPRO = 'Knightley'
			AND PR.PRENOMPRO = 'Keira'
			AND PA.IDPRO = PR.IDPRO
			AND NOT EXISTS (
				SELECT
					*
				FROM
					LECTUREFILM   F,
					LECTUREEP     E
				WHERE
					F.IDCONTENU = PA.IDCONTENU
					AND E.IDCONTENU = PA.IDCONTENU
					AND F.IDCLIENT = P.IDCLIENT
					AND E.IDCLIENT = P.IDCLIENT
					AND F.IDPROFIL = P.IDPROFIL
					AND E.IDPROFIL = P.IDPROFIL
			)
	);

/

-- 10
CREATE OR REPLACE PROCEDURE PLANNING_EP(
	ID_CLI IN CLIENT.IDCLIENT%TYPE,
	ID_PROF IN PROFIL.IDPROFIL%TYPE
) IS
	D EPISODE.DATESORTIEEPISODE%TYPE;
	C EPISODE.IDCONTENU%TYPE;
	T SERIES.TITRECONTENU%TYPE;
	S EPISODE.NUMSAISON%TYPE;
	N EPISODE.NUMEPISODE%TYPE;
	E EPISODE.TITREEPISODE%TYPE;
BEGIN
	SELECT
		DATESORTIEEPISODE,
		IDCONTENU,
		TITRECONTENU,
		NUMSAISON,
		NUMEPISODE,
		TITREEPISODE INTO D,
		C,
		T,
		S,
		N,
		E
	FROM
		(
			SELECT
				E.DATESORTIEEPISODE,
				S.IDCONTENU,
				S.TITRECONTENU,
				E.NUMSAISON,
				E.NUMEPISODE,
				E.TITREEPISODE
			FROM
				SERIES  S,
				EPISODE E
			WHERE
				E.DATESORTIEEPISODE > SYSDATE
				AND S.IDCONTENU = E.IDCONTENU
			ORDER BY
				E.DATESORTIEEPISODE
		)         TEMP
	WHERE
		TEMP.IDCONTENU IN (
			SELECT
				IDCONTENU
			FROM
				LECTUREEP
			WHERE
				IDCLIENT = ID_CLI
				AND IDPROFIL = ID_PROF
			GROUP BY
				IDCONTENU
		);
END;
/

-- 11
SELECT
	D.NOMCATEGORIE,
	COUNT(*)
FROM
	PARTICIPE     PA,
	PROFESSIONNEL PR,
	DEFINIT       D
WHERE
	PR.NOMPRO = 'Tartempion'
	AND PA.PROFESSION = 'Réalisateur'
	AND PA.IDPRO = PR.IDPRO
	AND D.IDCONTENU = PA.IDCONTENU
	AND ROWNUM = 1
GROUP BY
	D.NOMCATEGORIE
ORDER BY
	D.NOMCATEGORIE DESC;

/

-- 12
SELECT
	CL.TYPEABONNEMENT,
	COUNT(*)
FROM
	AVIS          A,
	PARTICIPE     PA,
	PROFESSIONNEL PR,
	CLIENT        CL
WHERE
	PR.NOMPRO = 'Dwayne The Rock'
	AND PR.PRENOMPRO = 'Johnson'
	AND PA.PROFESSION = 'Acteur'
	AND PA.ROLE = 'Principal'
	AND A.IDCONTENU = PA.IDCONTENU
	AND PA.IDPRO = PR.IDPRO
	AND A.IDCLIENT = CL.IDCLIENT
GROUP BY
	TYPEABONNEMENT;

/

-- 13
DECLARE
	N INT := 1;
	F INT;
	S INT;
	A INT;
BEGIN
	SELECT
		COUNT(P.IDPROFIL) INTO F
	FROM
		CLIENT C,
		PROFIL P
	WHERE
		C.TYPEABONNEMENT = 'Famille'
		AND P.TYPEPROFIL = 'Enfant'
		AND C.IDCLIENT = P.IDCLIENT;
	SELECT
		COUNT(DISTINCT P.IDCLIENT) INTO A
	FROM
		CLIENT C,
		PROFIL P
	WHERE
		C.TYPEABONNEMENT = 'Famille'
		AND P.TYPEPROFIL = 'Enfant'
		AND C.IDCLIENT = P.IDCLIENT;
	IF A != 0 THEN
		N := A;
	END IF;

	F := F/N;
	SELECT
		COUNT(P.IDPROFIL) INTO S
	FROM
		CLIENT C,
		PROFIL P
	WHERE
		C.TYPEABONNEMENT = 'Standard'
		AND P.TYPEPROFIL = 'Enfant'
		AND C.IDCLIENT = P.IDCLIENT;
	SELECT
		COUNT(DISTINCT P.IDCLIENT) INTO A
	FROM
		CLIENT C,
		PROFIL P
	WHERE
		C.TYPEABONNEMENT = 'Standard'
		AND P.TYPEPROFIL = 'Enfant'
		AND C.IDCLIENT = P.IDCLIENT;
	IF A != 0 THEN
		N := A;
	END IF;

	S := S/N;
	DBMS_OUTPUT.PUT_LINE('Le nombre moyen de profil Enfant par compte Famille est ',
	                                                                               || F);
	DBMS_OUTPUT.PUT_LINE('Le nombre moyen de profil Enfant par compte Standard est ',
	                                                                                || S);
END;
/

-- 14
/* la conception permet pas de savoir si on épisode a été regardé 2 fois, sauf si c'est 2 jours différents donc on va group by et rassembler les mêmes épisodes */

CREATE OR REPLACE FUNCTION NBEPISODE_PROFIL (
	ID_CLI IN PROFIL.IDPROFIL%TYPE,
	ID_PROF IN PROFIL.IDPROFIL%TYPE
) RETURN NUMBER IS
	N NUMBER;
BEGIN
	SELECT
		COUNT(*) INTO N
	FROM
		LECTUREEP
	WHERE
		IDCLIENT = ID_CLI
		AND IDPROFIL = ID_PROF
	GROUP BY
		IDCONTENU,
		NUMSAISON,
		NUMEPISODE;
	RETURN N;
END;
/

-- 15
SELECT
	AVG(TRUNC(MONTHS_BETWEEN(SYSDATE, PR.AGEPRO)/12)) AS AGE_MOYEN
FROM
	PARTICIPE     PA,
	PROFESSIONNEL PR,
	FILMS         F
WHERE
	F.TITRECONTENU = 'Avengers'
	AND PA.PROFESSION = 'Acteur'
	AND PA.IDPRO = PR.IDPRO
	AND PA.IDCONTENU = F.IDCONTENU;

/

-- 16
SELECT
	P.IDCLIENT,
	P.IDPROFIL,
	L.IDCONTENU,
	F.TITRECONTENU
FROM
	PROFIL        P,
	LECTUREFILM   L,
	FILMS         F
WHERE
	P.AGEPROFIL >= (SYSDATE - NUMTOYMINTERVAL(25, 'year'))
	AND P.IDCLIENT = L.IDCLIENT
	AND P.IDPROFIL = L.IDPROFIL
	AND L.IDCONTENU = F.IDCONTENU
	AND L.IDCONTENU IN (
		SELECT
			D.IDCONTENU
		FROM
			DEFINIT       D,
			PARTICIPE     PA,
			PROFESSIONNEL PR
		WHERE
			D.NOMCATEGORIE = 'Guerre'
			AND PR.NOMPRO = 'Butler'
			AND PR.PRENOMPRO = 'Gerard'
			AND PA.PROFESSION = 'Acteur'
			AND D.IDCONTENU = PA.IDCONTENU
			AND PA.IDPRO = PR.IDPRO
	);

/

-- 17
SELECT
	COUNT(PA.IDPRO)
FROM
	PARTICIPE PA,
	FILMS     F
WHERE
	F.TITRECONTENU = 'Equalizer 3'
	AND PA.PROFESSION = 'Acteur'
	AND PA.ROLE = 'Secondaire'
	AND PA.IDCONTENU = F.IDCONTENU;

/

-- 18
-- personne (table profil) telle qu'il n'existe pas de film (vue film) tel que la personne a pas vu (table lecturefilm)

SELECT
	IDCLIENT,
	IDPROFIL,
	PSEUDO
FROM
	PROFIL
WHERE
	NOT EXISTS (
		SELECT
			*
		FROM
			FILMS
		WHERE
			NOT EXISTS (
				SELECT
					*
				FROM
					LECTUREFILM
				WHERE
					LECTUREFILM.IDCLIENT = PROFIL.IDCLIENT
					AND LECTUREFILM.IDPROFIL = PROFIL.IDPROFIL
					AND LECTUREFILM.IDCONTENU = FILMS.IDCONTENU
			)
	);

/

-- 19
/* -> reformulation de la question parce qu'elle est con :
quels sont les comptes avec abonnement étudiant dont le profil a noté plus de 30 films ? */

SELECT
	A.IDCLIENT,
	COUNT(A.IDCONTENU)
FROM
	AVIS   A,
	CLIENT C,
	FILMS  F
WHERE
	C.TYPEABONNEMENT = 'Etudiant'
	AND A.IDCLIENT = C.IDCLIENT
	AND A.IDCONTENU = F.IDCONTENU
GROUP BY
	A.IDCLIENT
HAVING
	COUNT(A.IDCONTENU) >= 30;

/

-- 20
SELECT
	NUMTODSINTERVAL(AVG(TEMP2.TEMPS_TOT), 'DAY') AS TEMPS_MOYEN_ETUDIANT
FROM
	(
		SELECT
			TEMP1.IDCLI,
			SUM(TEMP1.TEMPS) AS TEMPS_TOT
		FROM
			(
				SELECT
					L1.IDCLIENT                      AS IDCLI,
					SUM(L1.TEMPSFIN - L1.TEMPSDEBUT) AS TEMPS
				FROM
					LECTUREFILM L1,
					CLIENT      C1
				WHERE
					C1.TYPEABONNEMENT = 'Etudiant'
					AND L1.IDCLIENT = C1.IDCLIENT
				GROUP BY
					L1.IDCLIENT
				UNION
				SELECT
					L2.IDCLIENT                      AS IDCLI,
					SUM(L2.TEMPSFIN - L2.TEMPSDEBUT) AS TEMPS
				FROM
					LECTUREEP   L2,
					CLIENT      C2
				WHERE
					C2.TYPEABONNEMENT = 'Etudiant'
					AND L2.IDCLIENT = C2.IDCLIENT
				GROUP BY
					L2.IDCLIENT
			)           TEMP1
		GROUP BY
			TEMP1.IDCLI
	) TEMP2;

/

-- 22
SELECT
	NOMCATEGORIE,
	COUNT(*)
FROM
	DEFINIT
WHERE
	ROWNUM = 1
GROUP BY
	NOMCATEGORIE
ORDER BY
	COUNT(*) DESC;

/

-- 23
SELECT
	L.IDCONTENU,
	COUNT(DISTINCT L.IDCONTENU)
FROM
	LECTUREFILM L
	FULL JOIN FILMS F
	ON L.IDCONTENU = F.IDCONTENU
WHERE
	TO_CHAR(L.DATELECTURE) LIKE '%-jul-2023'
	AND ROWNUM = 1
GROUP BY
	L.IDCONTENU
ORDER BY
	2 DESC;

/

-- 24
SELECT
	NUMTODSINTERVAL(SUM(TEMPS), 'DAY')
FROM
	(
		SELECT
			L.IDCONTENU,
			L.DATELECTURE,
			(L.TEMPSFIN - L.TEMPSDEBUT) AS TEMPS
		FROM
			SERIES    S,
			LECTUREEP L
		WHERE
			S.ANNEESERIE = 2007
			AND L.DATELECTURE BETWEEN '01-may-2016' AND '31-jan-2018'
			AND S.IDCONTENU = L.IDCONTENU
	)
GROUP BY
	IDCONTENU;

/

-- 25
SELECT
	CO.TITRECONTENU,
	A.COMMENTAIRE
FROM
	CLIENT  CL,
	PROFIL  P,
	AVIS    A,
	CONTENU CO
WHERE
	CL.NOMCLIENT = 'Amallah'
	AND P.PSEUDO = 'Third-Cannon'
	AND CL.IDCLIENT = P.IDCLIENT
	AND P.IDCLIENT = A.IDCLIENT
	AND P.IDPROFIL = A.IDPROFIL
	AND A.IDCONTENU = CO.IDCONTENU;

/