------------------------------------------------------------------

/* TABLE ABONNEMENT */

------------------------------------------------------------------

/* TABLE CLIENT */

-- trigger pour vérifier que l'âge d'un client est supérieur à 18 ans
CREATE OR REPLACE TRIGGER age_cli before insert or update on Client for each row
BEGIN
	IF :new.AgeClient > SYSDATE - NUMTOYMINTERVAL(18, 'year')
		THEN raise_application_error(-20010, 'Lâge dun client doit être supérieur à 18 ans.');
	END IF;
END;
/

-- séquence ClientID
CREATE SEQUENCE id_cli
increment by 1
start with 1;

-- trigger pour la séquence ClientID
CREATE OR REPLACE TRIGGER nouveau_cli 
before insert on Client for each row
BEGIN
    :new.IDClient := id_cli.nextval;
END;
/

-- procédure pour supprimer un client, ses profils et les historiques si le compte est inactif depuis 12 mois, ou pour mettre à jour la date de prélèvement
CREATE OR REPLACE PROCEDURE date_prelev(id_cli in Client.IDClient%type) IS
    d	Client.DatePrelevement%type;
BEGIN
	SELECT DatePrelevement into d
    FROM Client
    WHERE IDClient = id_cli;

	IF ADD_MONTHS(d, 12) <= SYSDATE THEN
        DELETE FROM Client WHERE IDClient = id_cli;
	END IF;

	IF ADD_MONTHS(d, 1) = SYSDATE THEN
        UPDATE Client SET DatePrelevement = SYSDATE WHERE IDClient = id_cli;
	END IF;
END;
/

------------------------------------------------------------------

/* TABLE PROFIL */
    
-- trigger pour vérifier que l'âge d'un profil est compris entre 1 et 122 ans
CREATE OR REPLACE TRIGGER age_prof before insert or update on Profil for each row
BEGIN
	IF :new.AgeProfil > SYSDATE - NUMTOYMINTERVAL(1, 'year') OR :new.AgeProfil < SYSDATE - NUMTOYMINTERVAL(122, 'year')
		THEN raise_application_error(-20020, 'Lâge dun profil doit être compris entre 1 an et 122 ans.');
	END IF;
END;
/

-- trigger pour vérifier que le nombre de profils ne dépasse pas le nombre maximum autorisé par l'abonnement
CREATE OR REPLACE TRIGGER nb_profils before insert on Profil for each row
DECLARE
	n	int;
	t   Client.TypeAbonnement%type;
BEGIN
	select count(*) into n
	from Profil
	where IDClient = :new.IDClient;

	select TypeAbonnement into t
    from Client
    where IDClient = :new.IDClient;
	
	IF t in ('Essentiel', 'Etudiant') AND n >= 1
    	THEN raise_application_error(-20001, 'Impossible de créer un nouveau profil : 1 profil maximum autorisé pour le type dabonnement.');
    END IF;
	IF t = 'Standard' AND n >= 2
		THEN raise_application_error(-20002, 'Impossible de créer un nouveau profil : 2 profils maximum autorisés pour le type dabonnement.');
	END IF;
	IF t = 'Famille' AND n >= 4
		THEN raise_application_error(-20003, 'Impossible de créer un nouveau profil : 4 profils maximum autorisés pour le type dabonnement.');
	END IF;
END;
/

-- trigger pour vérifier qu'il y a bien un profil Adulte associé au compte client avant de créer un profil Enfant
CREATE OR REPLACE TRIGGER profil_enf before insert on Profil for each row
DECLARE
	p	int;
BEGIN
	IF :new.TypeProfil = 'Enfant' THEN
		select count(*) into p
		from Profil
		where IDClient = :new.IDClient
		and TypeProfil = 'Adulte';

		IF p = 0
			THEN raise_application_error(-20004, 'Impossible de créer un nouveau profil enfant : 1 profil adulte minimum est requis.');
		END IF;
	END IF;
END;
/

-- trigger pour vérifier qu'il y a bien toujours un profil Adulte associé au compte client s'il y a un profil Enfant avant de supprimer un autre profil Adulte 
CREATE OR REPLACE TRIGGER suppr_adulte before delete on Profil for each row
DECLARE
	a	int;
	e	int;
BEGIN
	select count(*) into e
	from Profil
	where IDClient = :old.IDClient
	and TypeProfil = 'Enfant';
	  
	IF :old.TypeProfil = 'Adulte' and e > 0 THEN
		select count(*) into a
		from Profil
		where IDClient = :old.IDClient
		and TypeProfil = 'Adulte';
		
		IF a = 0
			THEN raise_application_error(-20005, 'Impossible de supprimer le profil Adulte : 1 profil Adulte minimum est requis.');
		END IF;
	END IF;
END;
/

-- séquence IDProfil
CREATE SEQUENCE id_prof 
start with 1 
increment by 1;

-- trigger pour la séquence IDProfil -- ON EST PAS SURS DE CA
CREATE OR REPLACE TRIGGER nouveau_prof before insert on Profil for each row
BEGIN
	:new.IDProfil := id_prof.nextval;
END;
/

-- trigger pour vérifier que le MotDePasseProfil est conforme
CREATE OR REPLACE TRIGGER mdp_profil before insert on Profil for each row
BEGIN
	IF (:new.MotDePasseProfil IS NOT NULL)
	AND (LENGTHB(:new.MotDePasseProfil) != 4 OR (VALIDATE_CONVERSION(:new.MotDePasseProfil AS NUMBER) = 0))
		THEN raise_application_error(-20006, 'Le mot de passe saisi nest pas conforme : veuillez entrer un code à 4 chiffres.');
	END IF;
END;
/

------------------------------------------------------------------

/* TABLE CONTENU */

-- trigger pour vérifier que selon le type de contenu, les bonnes colonnes d'un tuple sont remplies
CREATE OR REPLACE TRIGGER type_contenu before insert on Contenu for each row
BEGIN
	IF :new.TypeContenu = 'Film' AND (:new.DateSortieFilm IS NULL OR :new.DureeFilm IS NULL)
		THEN raise_application_error(-20007, 'Si le contenu est un film, veuillez renseigner les champs DateSortieFilm et DureeFilm.');
	END IF;
	IF :new.TypeContenu = 'Série' AND :new.AnneeSerie IS NULL
		THEN raise_application_error(-20008, 'Si le contenu est une série, veuillez renseigner le champs AnneeSerie.');
	END IF;
END;
/

------------------------------------------------------------------

/* TABLE EPISODE */

-- trigger pour vérifier qu'un épisode n'est pas associé à un contenu de type Film
CREATE OR REPLACE TRIGGER insert_ep before insert on Episode for each row
DECLARE
	t	Contenu.TypeContenu%type;
BEGIN
	select TypeContenu into t
	from Contenu
	where IDContenu = :new.IDContenu;
	IF t = 'Film'
		THEN raise_application_error(-20009, 'Impossible dajouter un épisode à un film : le contenu doit être une série.');
	END IF;
END;
/

------------------------------------------------------------------

/* TABLE PROFESSIONNEL */

-- trigger pour vérifier que l'âge d'un professionnel est compris entre 1 et 122 ans
CREATE OR REPLACE TRIGGER age_pro before insert or update on Professionnel for each row
BEGIN
	IF :new.AgePro > SYSDATE - NUMTOYMINTERVAL(1, 'year') OR :new.AgePro < SYSDATE - NUMTOYMINTERVAL(122, 'year')
		THEN raise_application_error(-20020, 'Lâge dun professionnel doit être compris entre 1 an et 122 ans.');
	END IF;
END;
/

------------------------------------------------------------------

/* TABLE CATEGORIE */

------------------------------------------------------------------
------------------------------------------------------------------

/* TABLE LECTUREFILM */

/*
le profil 1 du compte 123 a regardé le film 1234 le 01/01/24 à midi (l'heure de la session est pas retenue)
123	1	1234	01-jan-2024	00:00:00	01:43:15	FR	1

maintenant qu'est-ce qu'il se passe si le soir je veux re-regarder le film ??
- on crée un nouveau row mais dans ce cas les clés primaires seront les mêmes donc il faudra ajouter un attribut 'nombre de fois rewatched' pour savoir combien de fois un profil a regardé le contenu pour avoir une indication du nombre d'heure de watch d'un profil
sauf que si on regarde le film en 2 fois, ça fera comme si on avait regardé le film 2 fois alors qu'on l'a regardé qu'une fois, donc il faudrait faire en sorte que les minutes ne s'overlap pas et CEST COMPLIQUE SA MERE
- on réécrit les minutes par dessus les anciennes
donc si je regarde une moitié de film le matin et l'autre l'après midi, dans lecturefilm on aura que la trace de la 2e moitié
tandis que si on regarde la première moitié un jour et l'autre moitié le lendemain, on aura les 2
*/

-- trigger pour vérifier que le contenu visionné n'est pas un épisode de série
CREATE OR REPLACE TRIGGER film before insert on LectureFilm for each row
DECLARE
	t	Contenu.TypeContenu%type;
BEGIN
	select TypeContenu into t
	from Contenu
	where IDContenu = :new.IdContenu;
	IF t = 'Série'
		THEN raise_application_error(-20011, 'Ce contenu est une série : à insérer dans la table LectureEP.');
	END IF;
END;
/

-- trigger pour mettre à jour la colonne SousTitres en fonction de la valeur dans LectureFilm
CREATE OR REPLACE TRIGGER soustitres_film after insert or update on LectureFilm FOR EACH ROW
BEGIN
	UPDATE Profil
	SET SousTitres = :new.SousTitres
	WHERE IDClient = :new.IDClient AND IDProfil = :new.IDProfil;
END;
/

-- trigger pour vérifier qu'un profil Enfant ne visionne pas de film dont la classification est inadaptée
CREATE OR REPLACE TRIGGER lectenf_film before insert on LectureFilm for each row
DECLARE
	t	Profil.TypeProfil%type;
	cl	Contenu.Classification%type;
BEGIN
	select TypeProfil into t
	from Profil
	where IDClient = :new.IDClient
	and IDProfil = :new.IDProfil;
	
	select Classification into cl
	from Contenu
	where IDContenu = :new.IDContenu;

	IF t = 'Enfant' AND cl not in ('Tous publics', '-10 ans', '-12 ans')
		THEN raise_application_error(-20012, 'Impossible pour ce profil de regarder ce film : classification inadaptée.');
	END IF;
END;
/

-- trigger pour vérifier que le profil d'un compte Essentiel ne visionne pas de contenu payant
CREATE OR REPLACE TRIGGER dispo_film before insert on LectureFilm for each row
DECLARE
	a	Abonnement.TypeAbonnement%type;
	d	Contenu.Disponibilite%type;
BEGIN
	select TypeAbonnement into a
	from Client
	where IDClient = :new.IDClient;
	
	select Disponibilite into d
	from Contenu
	where IDContenu = :new.IDContenu;

	IF a = 'Essentiel' AND d = 'Payant'
		THEN raise_application_error(-20013, 'Impossible de lire ce film avec labonnement Essentiel.');
	END IF;
END;
/

------------------------------------------------------------------

/* TABLE LECTUREEP */

-- trigger pour vérifier que le contenu visionné n'est pas un film
CREATE OR REPLACE TRIGGER episode before insert on LectureEP for each row
DECLARE
	t	Contenu.TypeContenu%type;
BEGIN
	select TypeContenu into t
	from Contenu
	where IDContenu = :new.IDContenu;
	IF t = 'Film'
		THEN raise_application_error(-20021, 'Ce contenu est une film : à insérer dans la table LectureFilm.');
	END IF;
END;
/

-- trigger pour mettre à jour la colonne SousTitres en fonction de la valeur dans LectureEP
CREATE OR REPLACE TRIGGER soustitres_ep after insert or update on LectureEP for each row
BEGIN
	UPDATE Profil
	SET SousTitres = :new.SousTitres
	WHERE IDClient = :new.IDClient AND IDProfil = :new.IDProfil;
END;
/

-- trigger pour vérifier qu'un profil Enfant ne visionne pas un épisode d'une série dont la classification est inadaptée
CREATE OR REPLACE TRIGGER lectenf_ep before insert on LectureEP for each row
DECLARE
	t	Profil.TypeProfil%type;
	cl	Contenu.Classification%type;
BEGIN
	select TypeProfil into t
	from Profil
	where IDClient = :new.IDClient
	and IDProfil = :new.IDProfil;
	
	select Classification into cl
	from Contenu
	where IDContenu = :new.IDContenu;

	IF t = 'Enfant' AND cl not in ('Tous publics', '-10 ans', '-12 ans')
		THEN raise_application_error(-20022, 'Impossible pour ce profil de regarder cet épisode : classification inadaptée.');
	END IF;
END;
/

-- trigger pour vérifier que le profil d'un compte Essentiel ne visionne pas de contenu payant
CREATE OR REPLACE TRIGGER dispo_ep before insert on LectureEP for each row
DECLARE
	a	Abonnement.TypeAbonnement%type;
	d	Contenu.Disponibilite%type;
BEGIN
	select TypeAbonnement into a
	from Client
	where IDClient = :new.IDClient;
	
	select Disponibilite into d
	from Contenu
	where IDContenu = :new.IDContenu;

	IF a = 'Essentiel' AND d = 'Payant'
		THEN raise_application_error(-20023, 'Impossible de lire cet épisode avec labonnement Essentiel.');
	END IF;
END;
/
------------------------------------------------------------------

/* TABLE AVIS */

-- trigger pour vérifier qu'un profil Enfant ne peut pas écrire d'avis
CREATE OR REPLACE TRIGGER avis_enf before insert on Avis for each row
DECLARE
	t	Profil.TypeProfil%type;
BEGIN
	select TypeProfil into t
	from Profil
	where IDClient = :new.IDClient
	and IDProfil = :new.IDProfil;
	IF t = 'Enfant'
		THEN raise_application_error(-20031, 'Impossible pour ce profil décrire un avis ou de donner un note : profil de type enfant.');
	END IF;
END;
/

------------------------------------------------------------------

/* TABLE PARTICIPE */

------------------------------------------------------------------

/* TABLE DEFINIT */

